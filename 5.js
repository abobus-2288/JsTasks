// // N-1
// // Задание 1
// // Написать функцию, которая принимает два параметра и складывает их.
// //     Предусмотреть проверку на тип данных. Если хоть один из параметров не является числом, должно выводиться ообщение об ошибке. Также обраьботайте случай, если не было введено два параметра.
// //     Примеры результатов вызова функции:
// //     sum(2,4); // 6
// // sum('d',4); // введенные данные не являются числами
// // sum(1, [2]); // введенные данные не являются числами
// // sum(1); // введите два параметра
// // sum(); // введите два параметра
//
// function sum(x, y) {
//     if(typeof x !== "number" || typeof y !== "number") {
//         if (!x || !y) {
//             console.log("Введите два параметра")
//         } else{
//             console.log("Введенные данные не являются числами");
//         }
//     } else if (typeof x === "number" && typeof y === "number") {
//         console.log(x + y);
//     }
// }
//
// sum(1, "a")

// // N-2
// // Задание 2
// // Измените функцию "square" так, чтобы в случае ее вызова без аргумента генерировалась консольная ошибка (console.error):
// // "Функция "square" не может быть вызвана без аргумента"
// // function square(a) {
// //     console.log(a * a)
// // }
// // square(mini-apps) // 100
// // square()
// // ДО: NaN
// // ПОСЛЕ: Uncaught Error: Функция "square" не может быть вызвана без аргумента
//
// function square(a) {
//     if (!a) {
//         console.log("Uncaught Error: Функция \"square\" не может быть вызвана без аргумента")
//     } else {
//         console.log(a * a)
//     }
// }
//
// square()

// // N-3
// // Задание 3
// // Создать функцию "угадай число". Она принимает число от 1 до mini-apps (обязательно проверить, что число не больше mini-apps и не меньше 0). Генерирует рандомное число от 1 до mini-apps и сравнивает с заданным числом.
// //     Если они совпали, то возвращает “Вы выиграли”, если нет - то “Вы не угадали, ваше число -  ...,  а выпало число ...”
// // Функция создания случайного числа уже была ранее в материалах, в задаче по созданию случайного цвета.
// //     Написать функцию в стрелочном синтаксисе.
//
// function getRandomInteger(min, max) {
//     return Math.floor(Math.random() * (max - min)) + min;
// }
//
// const guessNumber = (number) => {
//     let randomNumber = getRandomInteger(1, mini-apps);
//     number === randomNumber ? console.log("Вы выиграли") : console.log(`Вы не угадали, ваше число -  ${number},  а выпало число ${randomNumber}`)
// }
//
// guessNumber(1);

// // N-4
// // Задание 4
// // Определить массив, например let arr = [5, 4, 3, 8, 0];
// // Создать функцию filterFor(arr, a). Функция должна вернуть новый массив из элементов arr, но в нем должны содержаться элементы, которые больше или равны (>=) значения переменной a.
// //     Например, запуск функции filterFor(arr, 5) дает результат [5,8]
// // запуск функции filterFor(arr, mini-apps) дает результат []
// // запуск функции filterFor(arr, 3.11) дает результат [4,5,8]
//
// let arr = [5, 4, 3, 8, 0];
//
// const filterArr = (arr, a) =>  {
//     let newArr = [];
//
//     for (let num of arr) {
//         if (num >= a) {
//             newArr.push(num)
//         }
//     }
//
//     return newArr;
// }
//
// console.log(filterArr(arr, 3.11))

// // N-5
// // Задание 5
// // Напишите функцию copyArr(arr), которая копирует массив, не изменяя оригинал. Используйте подходящий метод массива.
//
// const copyArr = (arr) => {
//     return arr.map();
// }

// N-6
// // Задание 6
// // Создайте функцию sumObjectValues, которая будет суммировать все значения свойств, которые являются числами. Сумму чисел необходимо вернуть из функции.
// //     Проверить работу функции можно на объекте:
// //     const objectWithNumbers = {
// //         a: mini-apps,
// //         b: 20,
// //         c: 'string',
// //         d: 12,
// //     }
//
// const objectWithNumbers = {
//     a: mini-apps,
//     b: 20,
//     c: 'string',
//     d: 12,
// }
//
// const sumObjectValues = (obj) => {
//     let sum = 0;
//
//     for (let item in obj) {
//         if (typeof obj[item] == "number") {
//             sum += obj[item];
//         }
//     }
//
//     return sum;
// }
//
// console.log(sumObjectValues(objectWithNumbers))

