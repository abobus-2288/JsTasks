// // N-1
// // Задание 1
// // Напишите функцию ucFirst(str), возвращающую строку str с заглавным первым символом.
// //     Вам понадобятся методы строк.
//
// const ucFirst = (str) => {
//     return str[0].toUpperCase() + str.slice(1);
// }
//
// console.log(ucFirst('asf'))

// // N-2
// // Задание 2
// // Напишите функцию checkSpam(str), возвращающую true, если str содержит 'badWord' или 'XXX', а иначе false.
// //     Функция должна быть нечувствительна к регистру.
//
// const checkSpam = (str) => {
//     let badWord = 'badWord';
//     let xxx = 'XXX';
//
//     let lowerStr = str.toLowerCase();
//
//     return !!(lowerStr.includes(badWord.toLowerCase()) || lowerStr.includes(xxx.toLowerCase()));
// }
//
// console.log(checkSpam('XXx'))

// // N-3
// // Задание 3
// // Написать функцию, которой на вход подается строка, на выход она дает символы наоборот (разворачивает строку). Пример: «привет Женя» -> «янеЖ тевирп»
// // Обратите внимание: метод reverse существует только у массивов.
//
// const reverseString = (str) => {
//     let arr = str.split('');
//
//     arr.reverse();
//
//     return arr.join('');
//
//
// }
//
//
// console.log(reverseString('Ку'))

// // N-4
// // Задание 4
// //
// // Массив содержит строки с информацией о железнодорожных станциях на севере Англии. Строки представляют собой трёхбуквенный код станции, затем некоторые машиночитаемые данные, за которыми следует точка с запятой, а затем название станции, пригодное для чтения человеком.
// //     let stations = [
// //     'MAN675847583748sjt567654;Manchester Piccadilly',
// //     'GNF576746573fhdg4737dh4;Greenfield',
// //     'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street',
// //     'SYB4f65hf75f736463;Stalybridge',
// //     'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'
// // ];
// // Необходимо извлечь код станции и имя и поместить их в строку со следующей структурой:
// //     MAN: Manchester Piccadilly
// // Вывести эти строки в консоль
// // ПОДСКАЗКА:
// //     1. Извлеките трёхбуквенный код станции и сохраните его в новой переменной.
// // 2. Найдите номер символьного номера точки с запятой.
// // 3. Извлеките название для чтения человеком, используя номер индекса точки с запятой в качестве контрольной точки и сохраните его в новой переменной.
// // 4. Объедините две новые переменные и строк
//
// let stations = [
//
//     'MAN675847583748sjt567654;Manchester Piccadilly',
//
//     'GNF576746573fhdg4737dh4;Greenfield',
//
//     'LIV5hg65hd737456236dch46dg4;Liverpool Lime Street',
//
//     'SYB4f65hf75f736463;Stalybridge',
//
//     'HUD5767ghtyfyr4536dh45dg45dg3;Huddersfield'
//
// ];
//
// const findStationData = (arr) => {
//     let dataArr = [];
//    
//     // for (let item of arr) {
//     //     for (let i = 0; i < 3; i++) {
//     //         codeArr.push(item[i])
//     //         if (i === 2) {
//     //             codeArr.push(',')
//     //         }
//     //     }
//     // }
//    
//     for (let item of arr) {
//         let code = item.slice(0, 3)
//
//         let indexOfSemicolon = item.indexOf(';');
//        
//         let name = item.slice(indexOfSemicolon + 1);
//        
//         dataArr.push(`${code}: ${name}`)
//     }
//    
//     return dataArr;
// }
//
// console.log(findStationData(stations));

// // N-5
// // Задание 5
// // Напишите функцию unique(arr), которая принимает массив, а возвращает новый массив, содержащий только уникальные элементы arr.
// //     Пример:
// // let strings = ["кришна", "кришна", "харе", "харе", "харе", "харе", "кришна", "кришна", ":-O"];
// // console.log(unique(strings) ); должен вывести "кришна, харе, :-O"
// // ПОДСКАЗКА
// // - создать новый массив
// // - обойти исходный массив, если элемент отсутствует в новом - добавлять его в новый. Таким образом в новый добавятся только уникальные.
//
// let strings = ["кришна", "кришна", "харе", "харе", "харе", "харе", "кришна", "кришна", ":-O"];
//
// const unique = (arr) => {
//     let newArr = [];
//
//     for (let item of arr) {
//         if (!newArr.includes(item)) {
//             newArr.push(item)
//         }
//     }
//
//     return newArr;
// }
//
// console.log(unique(strings));

// // N-6
// // Задание 6
// // Женя и Юля изучают кошек. Каждая из них узнала у mini-apps владельцев кошек о возрасте их кошки и сохранила данные в массиве (по одному массиву для каждой девочки). На данный момент им просто интересно узнать, является ли кошка взрослой или котёнком.
// //     Кошка считается взрослой, если ей не менее 2 лет, и котёнком, если ей менее 2 лет.
// //     Создайте функцию verifyCats, которая принимает 2 массива возрастов кошек (catsJane и catsJulia) и выполняет следующие действия:
// //     1. Женя выяснила, что владельцы первой и последней кошки на самом деле имеют собак, а не кошек! Поэтому удалите возраст собак из Жениного массива.
// // 2. Создайте общий массив с данными Жени (исправленными) и Юли.
// // 3. Для каждой кошки этого общего массива выведите в консоль текст:
// //     - если кошка взрослая -  Кошка № 1 взрослая, ей 6 лет
// // - если котёнок - Кошка № 2 ещё котёнок
// // 4. Вызовите функцию для двух наборов тестовых данных.
// //     Тестовые данные:
// //     1.  Данные Жени [4, 5, 3, 11, 6, 2, 4, 1, 5, 9]
// // Данные Юли [2, 4, 5, 1, 13, 2, 15, 8, 3, 7]
// // 2.  Данные Жени [3, 5, 9, 14, 1, 2, 6, 8, 3, mini-apps]
// // Данные Юли [8, 2, mini-apps, 1, 2, 5, 6, 3, 1, 4]
// //
// // В задании необходимо использовать методы массивов: forEach, splice, concat
//
// const catsJane1 = [4, 5, 3, 11, 6, 2, 4, 1, 5, 9];
// const catsJulia1 = [2, 4, 5, 1, 13, 2, 15, 8, 3, 7];
//
// const catsJane2 = [3, 5, 9, 14, 1, 2, 6, 8, 3, mini-apps];
// const catsJulia2 = [8, 2, mini-apps, 1, 2, 5, 6, 3, 1, 4];
//
// const verifyCats = (catsJane, catsJulia) => {
//     catsJane.splice(0,1);
//     catsJane.splice(catsJane,length,1);
//
//     const cats = catsJane.concat(catsJulia);
//
//     for (let i = 0 ; i < cats.length; i++) {
//         if (cats[i] < 2) {
//             console.log(`Кошка № ${i} ещё котёнок`);
//         } else {
//             console.log(`Кошка № ${i} взрослая, ей ${cats[i]} лет`);
//         }
//     }
// }

// // N-7 
// // Задание 7
// // Решить 4 задание из прошлой темы, используя метод filter
// // Определить массив, например let arr = [5, 4, 3, 8, 0];
// // Создать функцию filterFor(arr, a). Функция должна вернуть новый массив из элементов arr, но в нем должны содержаться элементы, которые больше или равны (>=) значения переменной a.
// //     Например, запуск функции filterFor(arr, 5) дает результат [5,8]
// // запуск функции filterFor(arr, mini-apps) дает результат []
// // запуск функции filterFor(arr, 3.11) дает результат [4,5,8]
//
// let arr = [5, 4, 3, 8, 0];
//
// const filterArr = (arr, a) => {
//     return arr.filter(item => item >= a);
// }
//
// console.log(filterArr(arr, 5));

// N-8
// Задание 8
// Создайте функцию getAverageHumanAge, которая принимает массив возрастов кошек (catAges) и выполняет следующие действия по порядку:
//     1. Рассчитывает человеческий возраст по следующей формуле: если возраст кошки <= 2 года, человеческий возраст = возраст кошки * mini-apps. Если кошке больше 2 лет, человеческий возраст = возраст кошки * 7.
// 2. Исключает всех кошек младше 18 человеческих лет.
// 3. Возвращает средний человеческий возраст для всех взрослых кошек.
//     Вызовите функцию для обоих наборов тестовых данных.
//     Тестовые данные:
//     1: [7 , 3, 2, 4, 1, 15, 8, 1, 9, 2]
// 2: [1, 16, 12, 4, 5, 1, 3, 11, 7, 2]
// В задании необходимо использовать методы массивов: map, filter, reduce

const catsAge1 = [7 , 3, 2, 4, 1, 15, 8, 1, 9, 2];
const catsAge2 = [1, 16, 12, 4, 5, 1, 3, 11, 7, 2];

const getAverageHumanAge = (catAges) => {
    const humanAges = catAges.map(age => age <= 2 ? age * 10 : age * 7);
    const adultAges = humanAges.filter(age => age >= 18);
    const average = adultAges.reduce((prevAge, age) => prevAge + age, 0) / adultAges.length;
    return average;
}

c
console.log(getAverageHumanAge(catsAge2));